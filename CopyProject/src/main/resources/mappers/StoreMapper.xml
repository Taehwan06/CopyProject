<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="edu.study.mapper.storeMapper">

	<select id="listStore" resultType="StoreVO" parameterType="SearchVO">
         SELECT spidx
         		,title
         		,product_name
         		,sale_price
         		,brand
         		,score
         		,discount
         		,review_cnt
         		,img_origin
         		,category
         		,detail
           FROM shopping_product
          WHERE 1=1
            AND del_yn = 'N' 
            <if test="searchType != null and searchType.equals('subject')">
            	AND subject like '%'||#{searchValue}||'%' 
            </if>
            <if test="searchType != null and searchType.equals('writer')">
            	AND writer like '%'||#{searchValue}||'%' 
            </if>
            <if test='category != null and category != ""'>
           		AND category = #{category} 
           	</if>
           	<if test='detail != null and detail != ""'>
           		AND detail = #{detail} 
           	</if>
           	<if test='free != null and free != "" and free == "Y"'>
           		AND free_delivery = #{free} 
           	</if>
           	<if test='priceStart != null and priceStart != "" and priceEnd != null'>
           		AND sale_price BETWEEN #{priceStart} AND #{priceEnd} 
            </if>
            <!-- 정렬방식 -->
           	<if test='sell_cnt != null and sell_cnt != "" and sell_cnt.equals("yes")'>
           		ORDER BY sell_cnt DESC 
           	</if>
           	<if test='review_cnt != null and review_cnt != "" and review_cnt.equals("yes")'>
           		ORDER BY review_cnt DESC 
           	</if>
           	<if test='discount != null and discount != "" and discount.equals("yes")'>
           		ORDER BY discount DESC 
           	</if>
           	<if test='order != null and order != "" and order=="sell_cnt"'>
           		ORDER BY sell_cnt DESC 
           	</if>
           	<if test='order != null and order != "" and order=="score"'>
           		ORDER BY score DESC 
           	</if>
           	<if test='order != null and order != "" and order=="priceUp"'>
           		ORDER BY sale_price DESC
           	</if>
           	<if test='order != null and order != "" and order=="priceDown"'>
           		ORDER BY sale_price 
           	</if>
           	<if test='page != null and page != "" and page.equals("limit")'>
           		Limit 4 
           	</if>
           	
    </select>
	
	<select id="detailStore" resultType="StoreVO" parameterType="int">
		<!-- <![CDATA[...]] 쿼리문의 >,< 등을 구분해주기 위해-->
		<![CDATA[
			SELECT 
				  *
			FROM shopping_product
			WHERE spidx = #{spidx}
		]]>
	</select>
    
    <insert id="insertStore" parameterType="StoreVO">
	    <![CDATA[
	    	INSERT INTO shopping_product(
	    		img_origin,
	    		img_system,
	    		title,
	    		product_Name,
	    		content,
	    		writer,
	    		origin_price,
	    		sale_price,
	    		discount,
	    		brand,
	    		free_delivery,
	    		delivery_charge,
	    		category,
	    		detail,
	    		midx
	    	) VALUES(
	    		#{img_origin},
	    		#{img_system},
	    		#{title},
	    		#{product_name},
	    		#{content},
	    		#{writer},
	    		#{origin_price},
	    		#{sale_price},
	    		#{discount},
	    		#{brand},
	    		#{free_delivery},
	    		#{delivery_charge},
	    		#{category},
	    		#{detail},
	    		#{midx}
	    	)
	    ]]>
	    <selectKey resultType="integer" keyProperty="spidx" order="AFTER">
	    	SELECT MAX(spidx)
	    	  FROM shopping_product
	    </selectKey>
    </insert>
    
    <update id="updateStore" parameterType="StoreVO">
	    <![CDATA[
	    	UPDATE shopping_product
	    	   SET title = #{title}
	    	      ,product_name = #{product_name}
	    		  ,content = #{content}
	    		  ,img_origin = #{img_origin}
	    		  ,img_system = #{img_system}
	    		  ,writer = #{writer}
	    		  ,origin_price = #{origin_price}
	    		  ,sale_price = #{sale_price}
	    		  ,discount = #{discount}
	    		  ,brand =#{brand}
	    		  ,free_delivery = #{free_delivery}
	    		  ,delivery_charge = #{delivery_charge}
	    		  ,category = #{category}
	    		  ,detail = #{detail}
	    		  ,midx = #{midx}
	    		  ,modify_yn = 'Y'
	    		  ,modify_date = CURRENT_TIMESTAMP
	         WHERE spidx = #{spidx}
          ]]>
    </update>
    
    <update id="deleteStore" parameterType="int">
	    <![CDATA[
	    	UPDATE shopping_product
	    	   SET del_yn = 'Y'
	    	   	  ,del_date = CURRENT_TIMESTAMP
	         WHERE spidx = #{spidx}
          ]]>
    </update>
    
    <insert id="basketIn" parameterType="BasketVO">
    	 <![CDATA[
	    	INSERT INTO shopping_basket(
	    		title,
	    		price,
	    		cnt,
	    		delivery_charge,
	    		free_delivery,
	    		img_origin,
	    		img_system,
	    		spidx,
	    		midx
	    	) VALUES(
	    		#{title},
	    		#{price},
	    		#{cnt},
	    		#{delivery_charge},
	    		#{free_delivery},
	    		#{img_origin},
	    		#{img_system},
	    		#{spidx},
	    		#{midx}
	    	)
	    ]]>
    </insert>
    
    <select id="listqna" resultType="Store_qnaVO" parameterType="int">
         SELECT qna.* FROM
         (SELECT @rownum := @rownum+1 as rownum
         		,sqidx
         		,content
         		,writer
         		,date_format(write_date, '%Y-%m-%d') write_date
         		,modify_yn
         		,date_format(modify_date, '%Y-%m-%d') modify_date
         		,answer
         		,answer_content
         		,answer_writer
         		,date_format(answer_date, '%Y-%m-%d') answer_date
         		,spidx
         		,midx
           FROM shopping_qna, (SELECT @rownum:=0) rn
          WHERE 1=1
            AND del_yn = 'N' 
           	AND spidx = #{spidx}
          ORDER BY sqidx DESC) qna
         WHERE rownum BETWEEN #{start} AND #{end};
         
    </select>
    
    <select id="qna_detail" resultType="Store_qnaVO" parameterType="int">
         SELECT sqidx
         		,content
         		,writer
         		,date_format(write_date, '%Y-%m-%d') as write_date
         		,modify_yn
         		,date_format(modify_date, '%Y-%m-%d') as modify_date
         		,answer
         		,answer_content
         		,answer_writer
         		,date_format(answer_date, '%Y-%m-%d') as answer_date
         		,spidx
           FROM shopping_qna
          WHERE 1=1
            AND del_yn = 'N' 
           	AND sqidx = #{sqidx}
    </select>
    
    <select id="qna_cnt" resultType="int" parameterType="int">
	    	select count(*) from shopping_qna where del_yn = 'N' AND spidx = #{spidx}
    </select>
    
    <insert id="insertqna" parameterType="Store_qnaVO">
	    	INSERT INTO shopping_qna(
	    		spidx,
	    		midx,
	    		content,
	    		writer
	    	) VALUES(
	    		#{spidx},
	    		#{midx},
	    		#{content},
	    		#{writer}
	    	)
    </insert>
    <update id="qna_modify" parameterType="Store_qnaVO">
    	UPDATE shopping_qna

		SET content = #{content}
			,modify_yn = 'Y'
			,modify_date = CURRENT_TIMESTAMP
		
		WHERE sqidx=#{sqidx}
    </update>
    <update id="qna_reply" parameterType="Store_qnaVO">
    	UPDATE shopping_qna

		SET answer = 'Y'
			,answer_content = #{answer_content}
			,answer_writer = #{answer_writer}
			,amidx = #{amidx}
			,answer_date = CURRENT_TIMESTAMP
		
		WHERE sqidx=#{sqidx}
    
    </update>
     <update id="qna_a_del" parameterType="int">
    	UPDATE shopping_qna

		SET answer = 'N'
		
		WHERE sqidx=#{sqidx}
    
    </update>
    <update id="qna_q_del" parameterType="int">
    	UPDATE shopping_qna

		SET del_yn = 'Y'
			,del_date = CURRENT_TIMESTAMP
		
		WHERE sqidx=#{sqidx}
    
    </update>
    
	<!-- 리뷰리스트 조회 -->
    <select id="store_reviewList" resultType="Store_reviewVO" parameterType="int">
    	SELECT sr.sridx
    			,sr.content
    			,sr.writer
    			,date_format(sr.write_date, '%Y-%m-%d') as write_date
    			,sr.modify_yn
    			,date_format(sr.modify_date, '%Y-%m-%d') as modify_date
    			,sr.img_origin
    			,sr.score
    			,sr.spidx
    			,sr.midx
    			,m.profile_origin
    			,m.profile_system
    			,m.nick_name
		FROM shopping_review sr
		INNER JOIN member m
		ON sr.midx = m.midx
		where sr.spidx = #{spidx} and sr.del_yn='N'
    </select>
    
    <!-- 단일리뷰 조회 -->
    <select id="store_review_Detail" resultType="Store_reviewVO" parameterType="int">
    	SELECT sr.sridx
    			,sr.content
    			,sr.img_origin
    			,sr.score
    			,sr.spidx
    			,sr.midx
		FROM shopping_review sr 
		where sr.sridx = #{sridx} and sr.del_yn='N';
    </select>
    
    <!-- 게시글 별점의 합 및 갯수 가져오기 -->
    <select id="store_review_cnt" resultType="StoreVO" parameterType="int">
    	SELECT count(*) as review_cnt, 
    		   sum(score) as score
		FROM shopping_review
		where spidx = #{spidx} and del_yn='N';
    </select>
    
    <!-- 리뷰갯수 및 별점 갱신 -->
     <update id="store_review_change" parameterType="StoreVO">
    	UPDATE shopping_product

		SET score = #{score}
			,review_cnt = #{review_cnt}
		
		WHERE spidx=#{spidx} and del_yn='N';
    </update>
    
    <!-- 리뷰 수정 -->
    <update id="store_review_modify" parameterType="Store_reviewVO">
    	UPDATE shopping_review

		SET content = #{content}
			,score = #{score}
			,img_origin = #{img_origin}
	    	,img_system = #{img_system}
			,modify_yn = 'Y'
			,modify_date = CURRENT_TIMESTAMP
		
		WHERE sridx=#{sridx}
    </update>
    
    <insert id="store_review_insert" parameterType="Store_reviewVO">
	    	INSERT INTO shopping_review(
	    		spidx,
	    		midx,
	    		content,
	    		writer,
	    		score
	    		<if test="img_origin != null">
	    		,img_origin
	    		,img_system
	    		</if>
	    	) VALUES(
	    		#{spidx},
	    		#{midx},
	    		#{content},
	    		#{writer},
	    		#{score}
	    		<if test="img_origin != null">
	    		,#{img_origin}
	    		,#{img_system}
	    		</if>
	    	)
    </insert>
    
    <!-- 리뷰삭제 -->
    <update id="store_review_del" parameterType="int">
    	UPDATE shopping_review

		SET del_yn = 'Y'
			,del_date = CURRENT_TIMESTAMP
		
		WHERE sridx=#{sridx}
    </update>
    
    <!-- 페이징을 위한 쿼리들 -->
    <!-- 데이터 카운트 쿼리 -->
    <select id="review_count" resultType="int" parameterType="int">
    	SELECT count(*) 
		FROM shopping_review
		where spidx = #{spidx} and del_yn='N';
    </select>
    
    <select id="reviewList" resultType="Store_reviewVO" parameterType="int">
    	SELECT review.* FROM
		(SELECT @rownum := @rownum+1 as rownum
				,sr.sridx 
				,sr.content 
				,sr.writer 
				,date_format(sr.write_date, '%Y-%m-%d') as write_date 
				,sr.modify_yn 
				,date_format(sr.modify_date, '%Y-%m-%d') as modify_date 
				,sr.img_origin 
				,sr.score 
				,sr.spidx 
				,sr.midx 
				,m.profile_origin 
				,m.profile_system 
				,m.nick_name 
		FROM shopping_review sr INNER JOIN member m ON sr.midx = m.midx 
				,(SELECT @rownum:=0) rn
		where sr.spidx = #{spidx} 
				and sr.del_yn='N'
		ORDER BY sridx desc) review
		WHERE rownum BETWEEN #{start} AND #{end};
		
    </select>
    
    <!-- 좋아요 여부확인 -->
    <select id="islikey" resultType="int" parameterType="int">
    	SELECT count(*) 
		FROM likey
		where spidx = #{spidx} and midx = #{midx};
    </select>
    <!-- 좋아요추가 -->
    <insert id="likeIN" parameterType="int">
    	INSERT INTO likey(
	    		spidx,
	    		midx
	    	) VALUES(
	    		#{spidx},
	    		#{midx}
	    	)
    </insert>
    <!-- 좋아요 삭제 -->
    <delete id="likeDEL" parameterType="int">
    	DELETE FROM likey WHERE spidx = #{spidx} AND midx = #{midx}
    </delete>
    
    <!-- 좋아요 상품 리스트 -->
    <select id="likelist" resultType="StoreVO" parameterType="int">
    	SELECT s.spidx
         		,s.title
         		,s.content
         		,s.product_name
         		,s.sale_price
         		,s.brand
         		,s.score
         		,s.discount
         		,s.review_cnt
         		,s.img_origin
         		,s.category
         		,s.detail 
    	FROM likey l 
    	INNER JOIN shopping_product s 
    	ON l.spidx = s.spidx 
    	WHERE l.midx= #{midx}
    	ORDER BY l.lidx DESC;
    
    </select>
    
    <select id="eventlist" resultType="EventVO">
    	SELECT eidx
    			,e.main_img
    	FROM event_view e
    </select>
    <select id="event_detail" resultType="EventVO" parameterType="int">
    	SELECT *
    	FROM event_view e
    	WHERE e.eidx=#{eidx}
    </select>
</mapper>